/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interfaz;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.PrintWriter;
import java.util.Random;
import javax.swing.BoxLayout;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import pso1.Cola;
import pso1.Proceso;
import pso1.Nodo;
import pso1.CPU;
import pso1.PSO1;
import static pso1.PSO1.colaReady;
import static pso1.PSO1.colaBlock;
import static pso1.PSO1.colaFinish;
import static pso1.PSO1.cpu1;
import static pso1.PSO1.cpu2;
import static pso1.PSO1.cpu3;
import static pso1.PSO1.iniciarRelojGlobal;

/**
 *
 * @author SebasBD
 */
public class MainPage extends javax.swing.JFrame {
    private int cycleDuration;
    public CPUPane cpuPane1;
    public CPUPane cpuPane2;
    public CPUPane cpuPane3;
    /**
     * Creates new form MainPage
     */
    public MainPage() {
        initComponents();
        
        configurarSpinners();
        
        listosContainer.setLayout(new BoxLayout(listosContainer, BoxLayout.X_AXIS));
        bloqueadosContainer.setLayout(new BoxLayout(bloqueadosContainer, BoxLayout.X_AXIS));
        terminadosContainer.setLayout(new BoxLayout(terminadosContainer, BoxLayout.X_AXIS));
        
        iniciarActualizacionAutomatica(PSO1.colaReady, listosContainer, PSO1.colaBlock, bloqueadosContainer, PSO1.colaFinish, terminadosContainer);
        
        // Crear y añadir los paneles de CPU
        cpuPane1 = new CPUPane(cpu1);
        cpuPane2 = new CPUPane(cpu2);
        cpuPane3 = new CPUPane(cpu3);

        CPUPanel1.setLayout(new java.awt.BorderLayout());
        CPUPanel1.add(cpuPane1, java.awt.BorderLayout.CENTER);

        CPUPanel2.setLayout(new java.awt.BorderLayout());
        CPUPanel2.add(cpuPane2, java.awt.BorderLayout.CENTER);

        CPUPanel3.setLayout(new java.awt.BorderLayout());
        CPUPanel3.add(cpuPane3, java.awt.BorderLayout.CENTER);

        CPUPanel1.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0)); // Sin margen
        CPUPanel2.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));
        CPUPanel3.setBorder(javax.swing.BorderFactory.createEmptyBorder(0, 0, 0, 0));

        cpuPane1.setPreferredSize(new java.awt.Dimension(200, 150)); // Ancho y alto específicos
        cpuPane2.setPreferredSize(new java.awt.Dimension(200, 150));
        cpuPane3.setPreferredSize(new java.awt.Dimension(200, 150));
    }
    
    public int getCycleDuration() {
        return cycleDuration; // Retorna la duración del ciclo
    }

    public void setCycleDuration(int duracion) {
        this.cycleDuration = duracion; // Actualiza la duración
        }
    
    public void actualizarCicloGlobal(int ciclo) {
        if (cicloGlobalJlabel != null) {
            cicloGlobalJlabel.setText(String.valueOf(ciclo));
        } else {
            System.out.println("Error: Label no inicializado.");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        numCPUActuales = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        numCPUCB = new javax.swing.JComboBox<>();
        guardarNumCPU = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        duracionCicloSpinner = new javax.swing.JSpinner();
        guardarDuracionCiclo = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        duracionCicloActual = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        CPUPanel1 = new javax.swing.JPanel();
        CPUPanel3 = new javax.swing.JPanel();
        CPUPanel2 = new javax.swing.JPanel();
        listosContainer = new javax.swing.JPanel();
        terminadosContainer = new javax.swing.JPanel();
        bloqueadosContainer = new javax.swing.JPanel();
        jLabel26 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        jPanel10 = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        jLabel35 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        crearProcesoButtom = new javax.swing.JButton();
        nameTextField = new javax.swing.JTextField();
        numInstructionSpinner = new javax.swing.JSpinner();
        ciclosParaInterruptionSpinner = new javax.swing.JSpinner();
        ciclosParaSatisfacerInterrupcionSpinner = new javax.swing.JSpinner();
        typeCB = new javax.swing.JComboBox<>();
        jPanel9 = new javax.swing.JPanel();
        jLabel37 = new javax.swing.JLabel();
        politicaCB = new javax.swing.JComboBox<>();
        guardarCambiosPlanificacion = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jLabel38 = new javax.swing.JLabel();
        cicloGlobalJlabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 51, 255));

        jButton1.setText("Comenzar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Iniciar Simulación con Datos de simulacion anterior");

        jLabel4.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("INICIAR NUEVA SIMULACION");

        jLabel5.setFont(new java.awt.Font("Perpetua Titling MT", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("CPUS ACTIVOS");

        numCPUActuales.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        numCPUActuales.setForeground(new java.awt.Color(255, 255, 255));
        numCPUActuales.setText("2");

        jLabel7.setFont(new java.awt.Font("Perpetua Titling MT", 1, 11)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Cambiar Numero de CPUS activos");

        numCPUCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3" }));

        guardarNumCPU.setText("Guardar");
        guardarNumCPU.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarNumCPUActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Perpetua Titling MT", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Cambiar duracion de ciclo de ejecución");

        guardarDuracionCiclo.setText("Guardar");
        guardarDuracionCiclo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarDuracionCicloActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Perpetua Titling MT", 1, 11)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Duracion actual de ciclos de ejecución");

        duracionCicloActual.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        duracionCicloActual.setForeground(new java.awt.Color(255, 255, 255));
        duracionCicloActual.setText("2");

        jLabel9.setFont(new java.awt.Font("Perpetua Titling MT", 1, 11)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Segundos");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(numCPUCB, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(207, 207, 207)
                        .addComponent(numCPUActuales, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel1)
                            .addComponent(jLabel4))
                        .addGap(48, 48, 48)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel5)
                            .addComponent(jLabel9)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(guardarDuracionCiclo))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(duracionCicloSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(214, 214, 214)
                                .addComponent(duracionCicloActual, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addComponent(guardarNumCPU))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(44, 44, 44)
                        .addComponent(jLabel3))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(222, 222, 222)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(750, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel7))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(numCPUActuales)
                    .addComponent(numCPUCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(21, 21, 21)
                .addComponent(guardarNumCPU)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(duracionCicloSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(duracionCicloActual))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(guardarDuracionCiclo)
                    .addComponent(jLabel9))
                .addGap(60, 60, 60)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(430, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Setup", jPanel1);

        jPanel2.setBackground(new java.awt.Color(51, 51, 255));

        javax.swing.GroupLayout CPUPanel1Layout = new javax.swing.GroupLayout(CPUPanel1);
        CPUPanel1.setLayout(CPUPanel1Layout);
        CPUPanel1Layout.setHorizontalGroup(
            CPUPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 197, Short.MAX_VALUE)
        );
        CPUPanel1Layout.setVerticalGroup(
            CPUPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 146, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout CPUPanel3Layout = new javax.swing.GroupLayout(CPUPanel3);
        CPUPanel3.setLayout(CPUPanel3Layout);
        CPUPanel3Layout.setHorizontalGroup(
            CPUPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 192, Short.MAX_VALUE)
        );
        CPUPanel3Layout.setVerticalGroup(
            CPUPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 136, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout CPUPanel2Layout = new javax.swing.GroupLayout(CPUPanel2);
        CPUPanel2.setLayout(CPUPanel2Layout);
        CPUPanel2Layout.setHorizontalGroup(
            CPUPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 197, Short.MAX_VALUE)
        );
        CPUPanel2Layout.setVerticalGroup(
            CPUPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 136, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout listosContainerLayout = new javax.swing.GroupLayout(listosContainer);
        listosContainer.setLayout(listosContainerLayout);
        listosContainerLayout.setHorizontalGroup(
            listosContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 614, Short.MAX_VALUE)
        );
        listosContainerLayout.setVerticalGroup(
            listosContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 126, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout terminadosContainerLayout = new javax.swing.GroupLayout(terminadosContainer);
        terminadosContainer.setLayout(terminadosContainerLayout);
        terminadosContainerLayout.setHorizontalGroup(
            terminadosContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 614, Short.MAX_VALUE)
        );
        terminadosContainerLayout.setVerticalGroup(
            terminadosContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 123, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout bloqueadosContainerLayout = new javax.swing.GroupLayout(bloqueadosContainer);
        bloqueadosContainer.setLayout(bloqueadosContainerLayout);
        bloqueadosContainerLayout.setHorizontalGroup(
            bloqueadosContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 614, Short.MAX_VALUE)
        );
        bloqueadosContainerLayout.setVerticalGroup(
            bloqueadosContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 123, Short.MAX_VALUE)
        );

        jLabel26.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jLabel26.setForeground(new java.awt.Color(255, 255, 255));
        jLabel26.setText("Cola de Terminados: ");

        jLabel27.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jLabel27.setForeground(new java.awt.Color(255, 255, 255));
        jLabel27.setText("Cola de Listos: ");

        jLabel28.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jLabel28.setForeground(new java.awt.Color(255, 255, 255));
        jLabel28.setText("Cola de Bloqueados:");

        jPanel10.setBackground(new java.awt.Color(204, 255, 204));

        jLabel29.setFont(new java.awt.Font("Perpetua Titling MT", 1, 14)); // NOI18N
        jLabel29.setText("Crear Proceso");

        jLabel30.setFont(new java.awt.Font("Perpetua Titling MT", 1, 11)); // NOI18N
        jLabel30.setText("Nombre:");

        jLabel31.setFont(new java.awt.Font("Perpetua Titling MT", 1, 11)); // NOI18N
        jLabel31.setText("Numero de Instrucciones:");

        jLabel32.setFont(new java.awt.Font("Perpetua Titling MT", 1, 11)); // NOI18N
        jLabel32.setText("Numero de ciclos para ");

        jLabel33.setFont(new java.awt.Font("Perpetua Titling MT", 1, 11)); // NOI18N
        jLabel33.setText("generar interrupción: ");

        jLabel34.setFont(new java.awt.Font("Perpetua Titling MT", 1, 11)); // NOI18N
        jLabel34.setText("Numero de ciclos para ");

        jLabel35.setFont(new java.awt.Font("Perpetua Titling MT", 1, 11)); // NOI18N
        jLabel35.setText("satisfacer interrupción:");

        jLabel36.setFont(new java.awt.Font("Perpetua Titling MT", 1, 11)); // NOI18N
        jLabel36.setText("Tipo:");

        crearProcesoButtom.setText("Crear Proceso");
        crearProcesoButtom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                crearProcesoButtomActionPerformed(evt);
            }
        });

        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });

        typeCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "CPU bound", "I/O bound" }));
        typeCB.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                typeCBComponentAdded(evt);
            }
        });
        typeCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                typeCBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel31)
                    .addComponent(jLabel36)
                    .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel34, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel33, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel30)
                    .addComponent(jLabel32)
                    .addComponent(jLabel35, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                        .addComponent(typeCB, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(ciclosParaSatisfacerInterrupcionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ciclosParaInterruptionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(numInstructionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(94, 94, 94))))
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(121, 121, 121)
                        .addComponent(jLabel29))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(155, 155, 155)
                        .addComponent(crearProcesoButtom)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel29)
                .addGap(37, 37, 37)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(numInstructionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel32)
                    .addComponent(ciclosParaInterruptionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel33)
                .addGap(18, 18, 18)
                .addComponent(jLabel34, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel35, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ciclosParaSatisfacerInterrupcionSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(typeCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(crearProcesoButtom)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        jPanel9.setBackground(new java.awt.Color(204, 255, 204));

        jLabel37.setFont(new java.awt.Font("Perpetua Titling MT", 1, 11)); // NOI18N
        jLabel37.setText("Cambiar Politica de Planificación");

        politicaCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "FCFS", "Round Robin", "SPN", "SRT", "HRRN" }));
        politicaCB.addContainerListener(new java.awt.event.ContainerAdapter() {
            public void componentAdded(java.awt.event.ContainerEvent evt) {
                politicaCBComponentAdded(evt);
            }
        });
        politicaCB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                politicaCBActionPerformed(evt);
            }
        });

        guardarCambiosPlanificacion.setText("Cambiar");
        guardarCambiosPlanificacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarCambiosPlanificacionActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(102, 102, 102)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel37)
                            .addComponent(politicaCB, javax.swing.GroupLayout.PREFERRED_SIZE, 202, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(125, 125, 125)
                        .addComponent(guardarCambiosPlanificacion, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel37)
                .addGap(18, 18, 18)
                .addComponent(politicaCB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(guardarCambiosPlanificacion)
                .addContainerGap(34, Short.MAX_VALUE))
        );

        jButton6.setText("Crear 10 procesos");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        jLabel38.setForeground(new java.awt.Color(255, 255, 255));
        jLabel38.setText("Ciclo de Reloj Global");

        cicloGlobalJlabel.setBackground(new java.awt.Color(255, 255, 255));
        cicloGlobalJlabel.setFont(new java.awt.Font("Perpetua Titling MT", 1, 18)); // NOI18N
        cicloGlobalJlabel.setForeground(new java.awt.Color(255, 255, 255));
        cicloGlobalJlabel.setText("0");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(153, 153, 153)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(81, 81, 81)
                        .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cicloGlobalJlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, 438, Short.MAX_VALUE)
                            .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel26)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(bloqueadosContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(terminadosContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(listosContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel28, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(38, 38, 38)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(CPUPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(CPUPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(CPUPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel27, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(48, 48, 48)
                        .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addComponent(jLabel27)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(CPUPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(listosContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel28)))
                        .addGap(17, 17, 17)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(bloqueadosContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(CPUPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel26)))
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton6))
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(terminadosContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(CPUPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cicloGlobalJlabel, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(164, Short.MAX_VALUE))
        );

        jTabbedPane2.addTab("Simulacion", jPanel2);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane2)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jTabbedPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 852, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        cargarSetUp();
        iniciarRelojGlobal();
        cargarProcesos();
        
    }//GEN-LAST:event_jButton1ActionPerformed

    private void crearProcesoButtomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_crearProcesoButtomActionPerformed
        // TODO add your handling code here:
        try {
        
        // Obtener datos de los campos
            String name = nameTextField.getText();
            int numInstructions = (int) numInstructionSpinner.getValue();
            String type = (String) typeCB.getSelectedItem();
            
            
            int ciclosParaGenerarInterrupcion = (int) ciclosParaInterruptionSpinner.getValue();
            int ciclosParaSatisfacerInterrupcion = (int) ciclosParaSatisfacerInterrupcionSpinner.getValue();

        // Validar que el nombre no esté vacío
            if (name.isEmpty()) {
                throw new IllegalArgumentException("El nombre no puede estar vacío.");
            }

        // Validar condiciones para CPU bound o I/O bound
            if ("CPU bound".equals(type)) {
                
                ciclosParaGenerarInterrupcion = 0;
                ciclosParaSatisfacerInterrupcion = 0;
            }
                
          
            if ("I/O bound".equals(type)&& ciclosParaGenerarInterrupcion >= numInstructions) {
                throw new IllegalArgumentException("Los ciclos para generar excepción no pueden ser iguales o mayores a la cant. de instrucciones");
            }
        // Crear el objeto Proceso
            Proceso proceso = new Proceso(name, type, numInstructions, ciclosParaGenerarInterrupcion, ciclosParaSatisfacerInterrupcion);
            guardarProcesos(name,type, numInstructions, ciclosParaGenerarInterrupcion, ciclosParaSatisfacerInterrupcion);
            //System.out.print("El tipo es:" + proceso.getType());
      
        proceso.setCicloEnqueCola(PSO1.cicloGlobal);
        
        // mandar proceso a la cola de listos
            colaReady.encolar(proceso);
        //colaReady.imprimirCola();

        // Restablecer los valores de los campos
            resetForm();
        

        // Mostrar un mensaje de éxito
            JOptionPane.showMessageDialog(this, "Proceso creado con éxito:\n" + proceso.getName(), 
                                      "Éxito", JOptionPane.INFORMATION_MESSAGE);

            } catch (Exception e) {
        // Mostrar errores en caso de que algo falle
                JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }    
      
    }//GEN-LAST:event_crearProcesoButtomActionPerformed

    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextFieldActionPerformed

    private void politicaCBComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_politicaCBComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_politicaCBComponentAdded

    private void politicaCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_politicaCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_politicaCBActionPerformed

    private void guardarCambiosPlanificacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarCambiosPlanificacionActionPerformed
        // TODO add your handling code here:
        String planificacion = (String) politicaCB.getSelectedItem();
        PSO1.setPoliticaActual(planificacion);
        JOptionPane.showMessageDialog(this, "Politica de planificación cambio a:" + planificacion);
        
    }//GEN-LAST:event_guardarCambiosPlanificacionActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
        try {
            for (int i = 1; i <= 10; i++) {
                

            // Generar datos automáticamente
                String nombre = "Proceso_" + i;
                int cantidadInstrucciones = new Random().nextInt(10) + 1; // Entre 1 y 10 instrucciones
                String tipo = (i % 2 == 0) ? "CPU bound" : "I/O bound"; // Alterna entre CPU bound e I/O bound
                int ciclosParaGenerarExcepcion = tipo.equals("I/O bound") ? new Random().nextInt(3) + 1 : 0;
                int ciclosParaSatisfacerExcepcion = tipo.equals("I/O bound") ? new Random().nextInt(2) + 1 : 0;

            // Crear el proceso
                Proceso proceso = new Proceso(
                    nombre,
                    tipo,
                    cantidadInstrucciones,
                    ciclosParaGenerarExcepcion,
                    ciclosParaSatisfacerExcepcion
                );
                guardarProcesos(nombre,tipo,cantidadInstrucciones,ciclosParaGenerarExcepcion,ciclosParaSatisfacerExcepcion);

                proceso.setCicloEnqueCola(PSO1.cicloGlobal);

            // Asignar PC y MAR iniciales
                proceso.setPc(0);
                proceso.setMar(0);

            // Escribir el nuevo valor en PCMAR.txt
                //escribirPCMAR(pcMarInicial + cantidadInstrucciones + 2);

            // Encolar el proceso en la cola de listos
                PSO1.colaReady.encolar(proceso);
            }

        // Mostrar un mensaje de éxito
            JOptionPane.showMessageDialog(this, "20 procesos creados automáticamente.", 
                                      "Éxito", JOptionPane.INFORMATION_MESSAGE);

        } catch (Exception e) {
        // Manejar errores
            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jButton6ActionPerformed

    private void guardarNumCPUActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarNumCPUActionPerformed
        // TODO add your handling code here:
        String cpuActives = (String) numCPUCB.getSelectedItem();
        String duracionCiclo = String.valueOf(duracionCicloSpinner.getValue());
        guardarSetUp(Integer.parseInt(duracionCiclo),cpuActives);
        numCPUActuales.setText(cpuActives);

        
        if(cpuActives.equals("2")){
            cpu3.setActive(false);
            CPUPanel3.setBackground(new java.awt.Color(255, 102, 102)); // Fondo rojo
            cpuPane3.setBackground(new java.awt.Color(255, 102, 102)); // Fondo rojo del panel
        for (java.awt.Component component : cpuPane3.getComponents()) {
            if (component instanceof javax.swing.JLabel) {
                ((javax.swing.JLabel) component).setForeground(new java.awt.Color(255, 102, 102)); // Texto blanco
            }}
        } else if (cpuActives.equals("3")){
            cpu3.setActive(true);
            CPUPanel3.setBackground(new java.awt.Color(242,242,242)); // Fondo normal
            cpuPane3.setBackground(new java.awt.Color(242,242,242)); // Fondo normal del panel
            for (java.awt.Component component : cpuPane3.getComponents()) {
                if (component instanceof javax.swing.JLabel) {
                    ((javax.swing.JLabel) component).setForeground(new java.awt.Color(0, 0, 0)); // Texto negro
                }
            }
        }
        CPUPanel3.repaint();
    // Mostrar mensaje de confirmación
    JOptionPane.showMessageDialog(this, "Número de CPUs guardado correctamente.");
    }//GEN-LAST:event_guardarNumCPUActionPerformed

    private void guardarDuracionCicloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarDuracionCicloActionPerformed
        // TODO add your handling code here:
        String duracionCiclo = String.valueOf(duracionCicloSpinner.getValue());
        String cpuActives = (String) numCPUCB.getSelectedItem();
        guardarSetUp(Integer.parseInt(duracionCiclo), cpuActives);
        cycleDuration = Integer.parseInt(duracionCiclo);
        duracionCicloActual.setText(duracionCiclo);
        iniciarRelojGlobal();
        //guardar en txt
        JOptionPane.showMessageDialog(this, "Duración de ciclos guardada correctamente.");
        
    }//GEN-LAST:event_guardarDuracionCicloActionPerformed

    private void typeCBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_typeCBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_typeCBActionPerformed

    private void typeCBComponentAdded(java.awt.event.ContainerEvent evt) {//GEN-FIRST:event_typeCBComponentAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_typeCBComponentAdded
    
    private void guardarSetUp(int duracionCiclo, String numCpu){
        String path = "src\\assets\\setup.txt";
        String setup = (String.valueOf(duracionCiclo)+","+numCpu);
        try{
            PrintWriter pw = new PrintWriter(new FileWriter(path, false));
            pw.print(setup);
            pw.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se pudo guardar la información");
        }
    }
    
    private void guardarProcesos(String name, String type, int instructions, Integer interrupTime, Integer interrupDuration){
        String path = "src\\assets\\procesos.txt";
        String procesos = (name + "," + type + "," + String.valueOf(instructions) + "," + String.valueOf(interrupTime) + "," + String.valueOf(interrupDuration) + "\n");
        try{
            FileWriter fw = new FileWriter(path, true); // true para anexar
            PrintWriter pw = new PrintWriter(fw);
            pw.print(procesos);
            pw.close();
         
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "No se pudo guardar la información");
        }
    }
    
    private static String leerProcesos(String path){
        String procesos = "";
        try{
            BufferedReader bf = new BufferedReader(new FileReader(path));
            String linea ;
            while((linea = bf.readLine()) != null){
                procesos += (linea+"\n");
            }
        } catch (Exception e) {
            procesos = "";
            JOptionPane.showMessageDialog(null, "Error al leer el archivo");
        }
        
        return procesos;
    }
    
    private static String leerSetUp(String path){
        String setup = "";
        try{
            BufferedReader bf = new BufferedReader(new FileReader(path));
            String linea ;
            while((linea = bf.readLine()) != null){
                setup += (linea+"\n");
            }
        } catch (Exception e) {
            setup = "";
            JOptionPane.showMessageDialog(null, "Error al leer el archivo");
        }
        
        return setup;
    }
    
    private void cargarSetUp(){
        String path = "src\\assets\\setup.txt";
        String setup = leerSetUp(path);
        String [] lineaSetup = setup.split(",");
        String duracionCiclo = lineaSetup[0];
        String numCpu = lineaSetup[1].trim();
        cycleDuration = Integer.parseInt(duracionCiclo);
        duracionCicloActual.setText(duracionCiclo);
        numCPUActuales.setText(numCpu);
        
        if(numCpu.equals("2")){
           
            cpu3.setActive(false);
            CPUPanel3.setBackground(new java.awt.Color(255, 102, 102)); // Fondo rojo
            cpuPane3.setBackground(new java.awt.Color(255, 102, 102)); // Fondo rojo del panel
        for (java.awt.Component component : cpuPane3.getComponents()) {
            if (component instanceof javax.swing.JLabel) {
                ((javax.swing.JLabel) component).setForeground(new java.awt.Color(255, 102, 102)); // Texto blanco
            }}
        } else if (numCpu.equals("3")){
            
            cpu3.setActive(true);
            CPUPanel3.setBackground(new java.awt.Color(242,242,242)); // Fondo normal
            cpuPane3.setBackground(new java.awt.Color(242,242,242)); // Fondo normal del panel
            for (java.awt.Component component : cpuPane3.getComponents()) {
                if (component instanceof javax.swing.JLabel) {
                    ((javax.swing.JLabel) component).setForeground(new java.awt.Color(0, 0, 0)); // Texto negro
                }
            }
        }
        CPUPanel3.repaint();
  
        
    }
    private void cargarProcesos(){
        String path = "src\\assets\\procesos.txt";
        String procesos = leerProcesos(path);
        String [] lineaProceso = procesos.split("\n");
        try{
            for(int i = 0; i < lineaProceso.length; i++){
                String [] parteProceso = lineaProceso[i].split(",");
                Proceso proceso = new Proceso(parteProceso[0],parteProceso[1],Integer.parseInt(parteProceso[2]),Integer.parseInt(parteProceso[3]), Integer.parseInt(parteProceso[4]));
                proceso.setStatus("Ready");
                colaReady.encolar(proceso);
            }
        } catch (Exception e){
            JOptionPane.showMessageDialog(null, "Error al leer el archivo: cargarProcesos");
        }
        
    }
    
    
    
    private void resetForm() {
        nameTextField.setText(""); // Vaciar el campo de texto
        numInstructionSpinner.setValue(0); // Restablecer el spinner a 0
        typeCB.setSelectedIndex(0); // Seleccionar el primer elemento del ComboBox
        ciclosParaInterruptionSpinner.setValue(0); // Restablecer el spinner a 0
        ciclosParaSatisfacerInterrupcionSpinner.setValue(0); // Restablecer el spinner a 0
        
    }
    
    private void desactivarInputManual(javax.swing.JSpinner spinner) {
    // Obtener el editor del JSpinner y desactivar la edición del campo de texto
    javax.swing.JSpinner.DefaultEditor editor = (javax.swing.JSpinner.DefaultEditor) spinner.getEditor();
    editor.getTextField().setEditable(false);
    }
    
    private void validacionASpinner(javax.swing.JSpinner spinner) {
        spinner.addChangeListener(e -> {
            int valor = (int) spinner.getValue();
            if (valor <= 0) {
            // Restablece el valor a 1 si es 0 o negativo
                spinner.setValue(1);
            
            }
            else{}
        });
    }
    
    private void agregarListenersDeValidacion() {
        validacionASpinner(numInstructionSpinner);
        validacionASpinner(ciclosParaInterruptionSpinner);
        validacionASpinner(ciclosParaSatisfacerInterrupcionSpinner);
        validacionASpinner(duracionCicloSpinner);
    }
    
    private void configurarSpinnersSoloFlechas() {
        desactivarInputManual(numInstructionSpinner);
        desactivarInputManual(ciclosParaInterruptionSpinner);
        desactivarInputManual(ciclosParaSatisfacerInterrupcionSpinner);
        desactivarInputManual(duracionCicloSpinner);
    }
    private void configurarSpinners() {
        configurarSpinnersSoloFlechas(); // Desactiva la entrada manual
        agregarListenersDeValidacion(); // Añade validación para valores mayores a 0
    }
    
    public void actualizarContenedor(Cola<Proceso> colaProcesos, javax.swing.JPanel container) {
        SwingUtilities.invokeLater(() -> {
        // Limpiar el contenedor antes de agregar nuevos paneles
            container.removeAll();

        // Recorrer la cola y crear un ListaPane para cada proceso
            Nodo<Proceso> nodoActual = colaProcesos.getFront(); // Accede al nodo inicial
            while (nodoActual != null) {
                Proceso proceso = nodoActual.getData();
                ProcessPane panelProceso = new ProcessPane(proceso);
                container.add(panelProceso); // Agregar el panel al contenedor
                nodoActual = nodoActual.getSiguiente(); // Avanzar al siguiente nodo
            }

        // Refrescar el contenedor para que los cambios sean visibles
            container.revalidate();
            container.repaint();
        });
    }
    
    public void iniciarActualizacionAutomatica(Cola<Proceso> colaReady, javax.swing.JPanel ReadyContainer,
                                           Cola<Proceso> colaBlock, javax.swing.JPanel BlockContainer,
                                           Cola<Proceso> colaFinish, javax.swing.JPanel FinishContainer) {
        Thread hiloActualizacion = new Thread(() -> {
            while (true) {
                try {
                    Thread.sleep(100); // Actualizar cada 500 ms (ajustable)

                // Actualizar el contenedor de listos
                    actualizarContenedor(colaReady, ReadyContainer);

                // Actualizar el contenedor de bloqueados
                    actualizarContenedor(colaBlock, BlockContainer);
                
                    actualizarContenedor(colaFinish, FinishContainer);

                } catch (InterruptedException e) {
                    e.printStackTrace();
                    Thread.currentThread().interrupt(); // Manejar la interrupción
                    break;
                }
            }
        });
    hiloActualizacion.setDaemon(true); // Terminará automáticamente cuando la aplicación cierre
    hiloActualizacion.start();
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel CPUPanel1;
    private javax.swing.JPanel CPUPanel2;
    private javax.swing.JPanel CPUPanel3;
    private javax.swing.JPanel bloqueadosContainer;
    private javax.swing.JLabel cicloGlobalJlabel;
    private javax.swing.JSpinner ciclosParaInterruptionSpinner;
    private javax.swing.JSpinner ciclosParaSatisfacerInterrupcionSpinner;
    private javax.swing.JButton crearProcesoButtom;
    private javax.swing.JLabel duracionCicloActual;
    private javax.swing.JSpinner duracionCicloSpinner;
    private javax.swing.JButton guardarCambiosPlanificacion;
    private javax.swing.JButton guardarDuracionCiclo;
    private javax.swing.JButton guardarNumCPU;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JPanel listosContainer;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JLabel numCPUActuales;
    private javax.swing.JComboBox<String> numCPUCB;
    private javax.swing.JSpinner numInstructionSpinner;
    private javax.swing.JComboBox<String> politicaCB;
    private javax.swing.JPanel terminadosContainer;
    private javax.swing.JComboBox<String> typeCB;
    // End of variables declaration//GEN-END:variables
}
